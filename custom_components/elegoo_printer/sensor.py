"""Sensor platform for elegoo_printer."""

from __future__ import annotations

from typing import TYPE_CHECKING

from homeassistant.components.sensor import SensorDeviceClass, SensorEntity
from homeassistant.const import UnitOfTime

from .definitions import (
    PRINTER_ATTRIBUTES_COMMON,
    PRINTER_ATTRIBUTES_RESIN,
    PRINTER_STATUS_COMMON,
    PRINTER_STATUS_FDM,
    PRINTER_STATUS_RESIN,
    ElegooPrinterSensorEntityDescription,
)
from .elegoo_sdcp.models.enums import PrinterType
from .entity import ElegooPrinterEntity

if TYPE_CHECKING:
    from datetime import datetime

    from homeassistant.core import HomeAssistant
    from homeassistant.helpers.entity_platform import AddEntitiesCallback
    from homeassistant.helpers.typing import StateType

    from .coordinator import ElegooDataUpdateCoordinator
    from .data import ElegooPrinterConfigEntry


async def async_setup_entry(
    hass: HomeAssistant,  # noqa: ARG001 Unused function argument: `hass`
    entry: ElegooPrinterConfigEntry,
    async_add_entities: AddEntitiesCallback,
) -> None:
    """
    Asynchronously sets up Elegoo printer sensor entities for a configuration entry.

    Adds sensor entities for printer statuses and attributes based on the printer type, ensuring each entity is updated before being added to Home Assistant.
    """
    coordinator: ElegooDataUpdateCoordinator = entry.runtime_data.coordinator
    printer_type = coordinator.config_entry.runtime_data.client._printer.printer_type
    for entity_description in PRINTER_STATUS_COMMON:
        async_add_entities(
            [
                ElegooPrinterSensor(
                    coordinator=coordinator,
                    entity_description=entity_description,
                )
            ],
            update_before_add=True,
        )
    for entity_description in PRINTER_ATTRIBUTES_COMMON:
        async_add_entities(
            [
                ElegooPrinterSensor(
                    coordinator=coordinator,
                    entity_description=entity_description,
                )
            ],
            update_before_add=True,
        )

    if printer_type == PrinterType.FDM:
        for entity_description in PRINTER_STATUS_FDM:
            async_add_entities(
                [
                    ElegooPrinterSensor(
                        coordinator=coordinator,
                        entity_description=entity_description,
                    )
                ],
                update_before_add=True,
            )
    elif printer_type == PrinterType.RESIN:
        for entity_description in PRINTER_STATUS_RESIN:
            async_add_entities(
                [
                    ElegooPrinterSensor(
                        coordinator=coordinator,
                        entity_description=entity_description,
                    )
                ],
                update_before_add=True,
            )

        for entity_description in PRINTER_ATTRIBUTES_RESIN:
            async_add_entities(
                [
                    ElegooPrinterSensor(
                        coordinator=coordinator,
                        entity_description=entity_description,
                    )
                ],
                update_before_add=True,
            )


class ElegooPrinterSensor(ElegooPrinterEntity, SensorEntity):
    """elegoo_printer Sensor class."""

    def __init__(
        self,
        coordinator: ElegooDataUpdateCoordinator,
        entity_description: ElegooPrinterSensorEntityDescription,
    ) -> None:
        """
        Initialize an Elegoo printer sensor entity with the given data coordinator and entity description.

        For duration sensors on FDM printers, sets the native unit of measurement to seconds.
        """
        super().__init__(coordinator)
        self.entity_description = entity_description
        self._attr_unique_id = coordinator.generate_unique_id(
            self.entity_description.key
        )
        printer_type = (
            coordinator.config_entry.runtime_data.client._printer.printer_type
        )

        """This block fixes the issues with the Centurai Carbon"""
        if (
            self.entity_description.device_class == SensorDeviceClass.DURATION
            and printer_type == PrinterType.FDM
        ):
            self._attr_native_unit_of_measurement = UnitOfTime.SECONDS

    @property
    def extra_state_attributes(self) -> dict:
        """
        Returns additional state attributes for the sensor.

        The attributes are generated by the entity description's extra_attributes method.
        """
        return self.entity_description.extra_attributes(self)

    @property
    def native_value(self) -> datetime | StateType:
        """Return the state of the sensor."""
        return self.entity_description.value_fn(self)

    @property
    def available(self) -> bool:
        """Return if entity is available."""
        return self.entity_description.available_fn(self)
