"""Sensor platform for elegoo_printer."""

from __future__ import annotations

from typing import TYPE_CHECKING

from homeassistant.components.sensor import SensorEntity

from .const import LOGGER
from .definitions import (
    PRINTER_ATTRIBUTES_COMMON,
    PRINTER_ATTRIBUTES_RESIN,
    PRINTER_STATUS_COMMON,
    PRINTER_STATUS_FDM,
    PRINTER_STATUS_RESIN,
    ElegooPrinterSensorEntityDescription,
)
from .elegoo_sdcp.models.enums import PrinterType
from .entity import ElegooPrinterEntity

if TYPE_CHECKING:
    from datetime import datetime

    from homeassistant.core import HomeAssistant
    from homeassistant.helpers.entity_platform import AddEntitiesCallback
    from homeassistant.helpers.typing import StateType

    from .coordinator import ElegooDataUpdateCoordinator
    from .data import ElegooPrinterConfigEntry


async def async_setup_entry(
    hass: HomeAssistant,  # noqa: ARG001 Unused function argument: `hass`
    entry: ElegooPrinterConfigEntry,
    async_add_entities: AddEntitiesCallback,
) -> None:
    """
    Asynchronously sets up Elegoo printer sensor entities for a configuration entry.

    Adds sensor entities for printer statuses and attributes based on the printer type, ensuring each entity is updated before being added to Home Assistant.
    """
    coordinator: ElegooDataUpdateCoordinator = entry.runtime_data.coordinator
    printer_type = coordinator.config_entry.runtime_data.api.printer.printer_type

    sensors: list[ElegooPrinterSensorEntityDescription] = []
    sensors.extend(PRINTER_STATUS_COMMON)
    sensors.extend(PRINTER_ATTRIBUTES_COMMON)

    if printer_type == PrinterType.FDM:
        sensors.extend(PRINTER_STATUS_FDM)
    elif printer_type == PrinterType.RESIN:
        sensors.extend(PRINTER_STATUS_RESIN)
        sensors.extend(PRINTER_ATTRIBUTES_RESIN)

    LOGGER.debug(f"Adding {len(sensors)} sensor entities")
    async_add_entities(
        [
            ElegooPrinterSensor(
                coordinator=coordinator,
                entity_description=entity_description,
            )
            for entity_description in sensors
        ],
        update_before_add=True,
    )


class ElegooPrinterSensor(ElegooPrinterEntity, SensorEntity):
    """elegoo_printer Sensor class."""

    def __init__(
        self,
        coordinator: ElegooDataUpdateCoordinator,
        entity_description: ElegooPrinterSensorEntityDescription,
    ) -> None:
        """
        Initialize an Elegoo printer sensor entity with the given data coordinator and entity description.

        For duration sensors on FDM printers, sets the native unit of measurement to seconds.
        """
        super().__init__(coordinator)
        self.entity_description = entity_description
        self._attr_unique_id = coordinator.generate_unique_id(
            self.entity_description.key
        )
        self.printer_data = coordinator.config_entry.runtime_data.api.printer_data

    @property
    def extra_state_attributes(self) -> dict:
        """
        Returns additional state attributes for the sensor.

        The attributes are generated by the entity description's extra_attributes method.
        """
        return self.entity_description.extra_attributes(self)

    @property
    def native_value(self) -> datetime | StateType:
        """Return the state of the sensor."""
        return self.entity_description.value_fn(self.printer_data)

    @property
    def available(self) -> bool:
        """Return if entity is available."""
        if not super().available:
            return False
        return self.entity_description.available_fn(self.printer_data)
