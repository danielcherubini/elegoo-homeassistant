blueprint:
  name: Elegoo Printer Progress Notification (v4)
  description: Sends notifications for printer progress, status changes, and error states.
  author: Daniel Cherubini
  homeassistant:
    min_version: 2024.6.0
  domain: automation
  input:
    percent_complete_entity:
      name: Percent Complete Entity
      description: The percent complete sensor for the Elegoo printer (look for entities ending in '_percent_complete').
      selector:
        entity:
          domain: sensor
          integration: elegoo_printer
    print_status_entity:
      name: Print Status Entity
      description: The print status sensor (should end with '_print_status').
      selector:
        entity:
          domain: sensor
          integration: elegoo_printer
          device_class: enum
    current_status_entity:
      name: Current Status Entity
      description: The current status sensor (should end with '_current_status').
      selector:
        entity:
          domain: sensor
          integration: elegoo_printer
          device_class: enum
    error_status_reason_entity:
      name: Error Status Reason Entity
      description: The error status reason sensor (should end with '_current_print_error_status_reason').
      selector:
        entity:
          domain: sensor
          integration: elegoo_printer
          device_class: enum
    notify_device:
      name: Notification Device
      description: The device to send notifications to.
      selector:
        device:
          integration: mobile_app
    percentage_divisor:
      name: Notification Frequency
      description: >-
        Notify when the percentage complete is divisible by this number. Use 1
        to be notified on every percentage change.
      selector:
        select:
          options:
            - "1"
            - "2"
            - "5"
      default: "5"
    camera_entity:
      name: Printer Camera (Optional)
      description: Override the default camera entity for the printer. Leave blank to use the default camera from the printer device.
      default: ""
      selector:
        entity:
          domain: camera
    dashboard_url:
      name: Dashboard URL (Optional)
      description: The path to open when the notification is clicked (e.g., '/dashboard-example/example', not the full URL).
      default: ""
    enable_status_notifications:
      name: Enable Status Change Notifications
      description: Send notifications when printer status changes (e.g., homing, heating, etc.)
      default: true
      selector:
        boolean:

mode: single
max_exceeded: silent

variables:
  percent_complete_entity: !input percent_complete_entity
  notify_device: !input notify_device
  percentage_divisor: !input percentage_divisor
  camera_entity_input: !input camera_entity
  dashboard_url: !input dashboard_url
  enable_status_notifications: !input enable_status_notifications
  print_status_entity: !input print_status_entity
  current_status_entity: !input current_status_entity
  error_status_reason_entity: !input error_status_reason_entity
  # Get the device from the percent complete entity
  printer_device: >-
    {{ device_id(percent_complete_entity) }}
  notification_group: >-
    {{ device_attr(printer_device, 'name') | slugify }}
  # Get other entities from the same device
  end_time_entity: >-
    {{ device_entities(printer_device) | select('search', '_end_time') |
    first }}
  file_name_entity: >-
    {{ device_entities(printer_device) | select('search', '_file_name') |
    first }}
  current_layer_entity: >-
    {{ device_entities(printer_device) | select('search', '_current_layer') |
    first }}
  total_layers_entity: >-
    {{ device_entities(printer_device) | select('search', '_total_layers') |
    first }}
  camera_entity: >-
    {{ (camera_entity_input
        if camera_entity_input != ''
        else (device_entities(printer_device) | select('match', '^camera\.') | first))
       | default('', true) }}

trigger:
  - platform: state
    entity_id: !input percent_complete_entity
  - platform: state
    entity_id: !input print_status_entity
  - platform: state
    entity_id: !input current_status_entity
  - platform: state
    entity_id: !input error_status_reason_entity

condition: []

action:
  - choose:
      # Handle print progress notifications (triggered by percent_complete_entity changes)
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == percent_complete_entity }}"
          - condition: template
            value_template: "{{ states(percent_complete_entity) not in ['unknown', 'unavailable'] }}"
          - condition: template
            value_template: "{{ states(percent_complete_entity) | int(0) < 100 }}"
          - condition: template
            value_template: >-
              {{ states(percent_complete_entity) | int(0) % (percentage_divisor | int) == 0 }}
          - condition: template
            value_template: >-
              {{ current_status_entity != none and states(current_status_entity) == 'printing' }}
          - condition: template
            value_template: "{{ notify_device != '' }}"
        sequence:
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: "Printing: {{ states(percent_complete_entity) | int(0) }}%\nLayer: {{ (states(current_layer_entity)|default('?', true)) }}/{{ (states(total_layers_entity)|default('?', true)) }}"
            message: "{{ states(file_name_entity)|default('Unknown file', true) }}"
            data:
              chronometer: true
              when: "{{ as_timestamp(states(end_time_entity))|int if end_time_entity != none and states(end_time_entity) not in ['unknown', 'unavailable'] else 0 }}"
              progress: "{{ states(percent_complete_entity)|int(0) }}"
              progress_max: 100
              image: "{{ ('/api/camera_proxy/' ~ camera_entity) if (camera_entity|default('', true)) != '' else '' }}"
              url: "{{ dashboard_url }}"
              clickAction: "{{ dashboard_url }}"
              group: "{{ notification_group }}"
              channel: "{{ notification_group }}"
              tag: "{{ notification_group }}"
              alert_once: true
              sticky: true
              push:
                interruption-level: passive

      # Handle print completion (triggered by print_status changes to complete OR percent_complete changes)
      - conditions:
          - condition: template
            value_template: "{{ notify_device != '' }}"
          - condition: template
            value_template: "{{ states(print_status_entity) == 'complete' }}"
          - condition: or
            conditions:
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ trigger.entity_id == print_status_entity }}"
                  - condition: template
                    value_template: "{{ trigger.from_state.state != 'complete' }}"
              - condition: and
                conditions:
                  - condition: template
                    value_template: "{{ trigger.entity_id == percent_complete_entity }}"
        sequence:
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: "🎉 Print Complete!"
            message: "{{ states(file_name_entity)|default('Print', true) }} has finished successfully"
            data:
              image: "{{ ('/api/camera_proxy/' ~ camera_entity) if (camera_entity|default('', true)) != '' else '' }}"
              url: "{{ dashboard_url }}"
              clickAction: "{{ dashboard_url }}"
              group: "{{ notification_group }}"
              channel: "{{ notification_group }}"
              tag: "{{ notification_group }}"
              sticky: true
              alert_once: true
              push:
                interruption-level: time-sensitive


      # Handle print status change notifications
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == print_status_entity }}"
          - condition: template
            value_template: "{{ notify_device != '' }}"
          - condition: template
            value_template: "{{ enable_status_notifications }}"
          - condition: template
            value_template: >-
              {{ states(print_status_entity) not in ['complete', 'stopped', 'stopping', 'idle', 'unknown', 'unavailable'] }}
        sequence:
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: "Printer Status Update"
            message: >-
              {% set status = states(print_status_entity) %}
              {% set file_name = states(file_name_entity)|default('Unknown file', true) %}
              {% if status == 'homing' %}
                🏠 Printer is homing
              {% elif status == 'printing' %}
                🖨️ Started printing: {{ file_name }}
              {% elif status == 'paused' or status == 'pausing' %}
                ⏸️ Print paused: {{ file_name }}
              {% elif status == 'loading' %}
                📥 Loading filament
              {% elif status == 'dropping' %}
                🔽 Platform dropping
              {% elif status == 'lifting' %}
                🔼 Platform lifting
              {% elif status == 'file_checking' %}
                📁 Checking print file
              {% elif status == 'recovery' or status == 'printing_recovery' %}
                🔄 Print recovery in progress
              {% else %}
                📊 Status: {{ status }}
              {% endif %}
            data:
              url: "{{ dashboard_url }}"
              clickAction: "{{ dashboard_url }}"
              group: "{{ notification_group }}"
              channel: "{{ notification_group }}"
              tag: "{{ notification_group }}_status"
              alert_once: true
              push:
                interruption-level: passive

      # Handle current status change notifications
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == current_status_entity }}"
          - condition: template
            value_template: "{{ notify_device != '' }}"
          - condition: template
            value_template: "{{ enable_status_notifications }}"
          - condition: template
            value_template: "{{ states(current_status_entity) not in ['idle', 'unknown', 'unavailable'] }}"
        sequence:
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: "Machine Status Update"
            message: >-
              {% set status = states(current_status_entity) %}
              {% set file_name = states(file_name_entity)|default('Unknown file', true) %}
              {% if status == 'printing' %}
                🖨️ Machine started printing: {{ file_name }}
              {% elif status == 'file_transferring' %}
                📁 File transfer in progress
              {% elif status == 'exposure_testing' %}
                🔬 Exposure test running
              {% elif status == 'devices_testing' %}
                🔧 Device self-check running
              {% elif status == 'leveling' %}
                📐 Bed leveling in progress
              {% elif status == 'loading_unloading' %}
                📥📤 Loading/unloading filament
              {% else %}
                📊 Machine status: {{ status }}
              {% endif %}
            data:
              url: "{{ dashboard_url }}"
              clickAction: "{{ dashboard_url }}"
              group: "{{ notification_group }}"
              channel: "{{ notification_group }}"
              tag: "{{ notification_group }}_machine_status"
              alert_once: true
              push:
                interruption-level: passive

      # Handle critical error status reasons
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == error_status_reason_entity }}"
          - condition: template
            value_template: "{{ notify_device != '' }}"
          - condition: template
            value_template: >-
              {{ states(error_status_reason_entity) not in ['ok', 'none', 'unknown', 'unavailable'] }}
        sequence:
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: "🚨 Critical Printer Error!"
            message: >-
              {% set error = states(error_status_reason_entity) %}
              {% set file_name = states(file_name_entity)|default('current print', true) %}
              {% if error == 'filament_runout' %}
                🧵 Filament runout detected during {{ file_name }}! Please load new filament.
              {% elif error == 'filament_about_to_runout' %}
                ⚠️ Filament runout imminent for {{ file_name }}! Please prepare new filament.
              {% elif error == 'filament_jam' %}
                🚫 Filament jam detected during {{ file_name }}! Please check the extruder.
              {% elif error == 'temp_error' %}
                🌡️ Temperature error detected! Please check nozzle and bed temperatures.
              {% elif error == 'level_failed' %}
                📐 Bed leveling failed! Please check the bed leveling system.
              {% elif error == 'home_failed' or error == 'home_failed_x' or error == 'home_failed_y' or error == 'home_failed_z' %}
                🏠 Homing failed! Please check the printer axes and endstops.
              {% elif error == 'bed_adhesion_failed' %}
                🛏️ Print detached from bed during {{ file_name }}!
              {% elif error == 'move_abnormal' %}
                ⚙️ Motor movement abnormality detected!
              {% elif error == 'file_error' %}
                📁 Print file error during {{ file_name }}!
              {% elif error == 'udisk_remove' %}
                💾 USB drive was removed during printing!
              {% elif error == 'nozzle_temp_sensor_offline' %}
                🌡️ Nozzle temperature sensor is offline!
              {% elif error == 'bed_temp_sensor_offline' %}
                🌡️ Bed temperature sensor is offline!
              {% elif error == 'camera_error' %}
                📷 Camera connection error!
              {% elif error == 'network_error' %}
                🌐 Network connection error!
              {% elif error == 'server_connect_failed' %}
                🖥️ Server connection failed!
              {% elif error == 'disconnect_app' %}
                📱 Controlling app disconnected during print!
              {% else %}
                ⚠️ Error: {{ error }}
              {% endif %}
            data:
              image: "{{ ('/api/camera_proxy/' ~ camera_entity) if (camera_entity|default('', true)) != '' else '' }}"
              url: "{{ dashboard_url }}"
              clickAction: "{{ dashboard_url }}"
              group: "{{ notification_group }}"
              channel: "{{ notification_group }}"
              tag: "{{ notification_group }}_critical_error"
              sticky: true
              alert_once: false
              push:
                interruption-level: time-sensitive
